<?php

declare(strict_types=1);

namespace Maginium\Framework\Filesystem\Drivers;

use Closure;
use DateTimeInterface;
use Illuminate\Support\Traits\Conditionable;
use RuntimeException;

/**
 * Class LocalFilesystem.
 *
 * A local filesystem adapter to manage disk operations, temporary URLs,
 * and signed URL serving capabilities.
 */
class LocalFilesystem extends DriverFilesystem
{
    use Conditionable;

    /**
     * The name of the filesystem disk.
     *
     * @var string
     */
    protected string $disk;

    /**
     * Flag to determine if signed URLs should serve corresponding files.
     *
     * @var bool
     */
    protected bool $shouldServeSignedUrls = false;

    /**
     * The Closure to resolve the URL generator.
     *
     * @var Closure|null
     */
    protected ?Closure $urlGeneratorResolver = null;

    /**
     * Determine if temporary URLs can be generated by the filesystem.
     *
     * @return bool True if temporary URLs can be generated, false otherwise.
     */
    public function providesTemporaryUrls(): bool
    {
        // Temporary URL generation is available if:
        // 1. A callback is defined.
        // 2. Signed URLs are enabled and a URL generator is provided.
        return $this->temporaryUrlCallback
            || ($this->shouldServeSignedUrls && $this->urlGeneratorResolver instanceof Closure);
    }

    /**
     * Generate a temporary URL for a file at the given path.
     *
     * @param string $path The relative path to the file.
     * @param DateTimeInterface $expiration The expiration time for the temporary URL.
     * @param array $options Additional options for the URL generator.
     *
     * @throws RuntimeException If temporary URLs are not supported by the driver.
     *
     * @return string The generated temporary URL.
     */
    public function temporaryUrl(string $path, DateTimeInterface $expiration, array $options = []): string
    {
        // Use the custom callback if provided.
        if ($this->temporaryUrlCallback) {
            return $this->temporaryUrlCallback->bindTo($this, static::class)(
                $path,
                $expiration,
                $options
            );
        }

        // Ensure the driver supports temporary URLs.
        if (! $this->providesTemporaryUrls()) {
            throw new RuntimeException('This driver does not support creating temporary URLs.');
        }

        // Generate the URL using the resolved URL generator.
        $urlGenerator = call_user_func($this->urlGeneratorResolver);

        return $urlGenerator->to(
            $urlGenerator->temporarySignedRoute(
                'storage.' . $this->disk,
                $expiration,
                ['path' => $path],
                absolute: false,
            ),
        );
    }

    /**
     * Set the name of the disk managed by this adapter.
     *
     * @param string $disk The name of the disk.
     *
     * @return $this
     */
    public function diskName(string $disk): self
    {
        // Assign the disk name.
        $this->disk = $disk;

        return $this;
    }

    /**
     * Configure signed URL serving for the adapter.
     *
     * @param bool $serve Whether signed URLs should serve the corresponding files.
     * @param Closure|null $urlGeneratorResolver The resolver for generating URLs.
     *
     * @return $this
     */
    public function shouldServeSignedUrls(bool $serve = true, ?Closure $urlGeneratorResolver = null): self
    {
        // Set the signed URL serving flag and the resolver.
        $this->shouldServeSignedUrls = $serve;
        $this->urlGeneratorResolver = $urlGeneratorResolver;

        return $this;
    }
}
